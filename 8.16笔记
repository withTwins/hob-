构造类型：
由若干个相同或不同类型数据构成的集合，这种数据类型被称为构造类型
例：int a[10]= {1,2,3,4,5,6,7,8,9,10}; 或 int a [10] = {1,2,3,4,5}

类型转换：
1.自动转换
（1）占用内存字节数少（值域少）的 类型，向占用内存字节数多（值域大）的类型转换，以保证精度不降低
2.转换方向：
char、short --> signed int --->unsigned int--->long --->double <---float 
1)当表达式中出现了char、short、int，这三种类型中的一种或多种，没有其他类型了参加运算的成员全部变成int类型的
参加运算，结果也是int类型
#include <stdio.h>
int main()
{
	printf("%d\n",5/2);
	return 0;
}

2)当表达式中出现了带小数点的实数（float、double），参加运算的成员全部变成double类型的参加运算，结果也是double型.
#include <stdio.h>
int main()
{
	printf("%lf\n",5.0/2);
	return 0;
}
3)当表达式中有有符号数 也有无符号数参加运算的成员变成无符号参加运算结果也是无符号数（表达式中无实数）
#include <stdio.h>
int main()
{
    int a =-8;
    unsigned int b = 7;
    if (a+b>0)
    {
        printf("a+b>0\n");
    }
    else if (a+b<0)
    {
        printf("a+b<0\n");
    }
    else 
    {
        printf("a+b=0\n");
    }
    printf("a+b=%d\n",a+b);
    return 0;
4)在赋值语句中等号右边的类型自动转化位等号左边的类型。
int main()
{
    int a;
    float f = 5.8f;
    a = f;
    printf("a=%d\n",a);
    return 0;
}

5)注意自动类型转换都是在运算的过程中进行临时性的转换，并不会影响自动类型转换的变量值和其类型
{
    int a;
    float f = 5.8f;
    a = f;
    printf("a=%d\n",a);
	printf("f=%f\n",f);
    return 0;
}


2.强制类型转换:通过类型转换运算符来实现
（类型说明符）（表达式）
功能：把表达式的运算结果强制转换成类型说明符所表示的类型
例如：
（float）a //转换成float类型
(int)(x+y) //转化成int类型
注意：类型说明符必须加括号


运算符

1.运算符的分类：
1.双目运算符：即参加运算的操作数有两个
例： +  a+b

2.单目运算符：参加运算的操作数只有一个
++自增运算符 给变量值+1
-- 自减运算符

int a = 10；a++

3.三目运算符：参加运算的操作数有3个
例：
（）？（）：（）

算数运算符：
+ - * / %  += -= *= /= %=

关系运算符
（>、<、==、>=、<=、!=）
